Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hour)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    No powerpoints
    Lots of assignments

Software Requirements
    Go Tools (https://go.dev/dl)
        go version
    Visual Studio Code
    Go Extension for VSCode (https://marketplace.visualstudio.com/items?itemName=golang.Go)
    Docker Desktop

Repo:
    https://github.com/tkmagesh/ibm-advgo-jan-2023

Prerequisites:
    Go Basics
        Datatypes, constructs
        Higher Order Functions
        Pointers
        Structs, Composition
        Interfaces
        Concurrency
            Goroutines
            WaitGroups
            Channels

About You
    Name
    Primary Skillset
    Experience in Go
    Attended MY "Go Intro" class? (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1)
    Go Basics Topics that you would like to revise
        Pointers (1 + 1 + 1)
        Interfaces (1 + 1 + 1 + 1 + 1)
        Higher Order Functions (1 + 1 + 1 + 1 + 1 + 1)
        Concurrency (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1)

Books:
    Agile Principles Patterns & Practices (Robert.C.Martin)
    
Channels
    Data types to enable communication between Goroutines
    Declaration
        var ch chan int
    Instantiation
        ch = make(chan int)
    Operations ( using <- operator )
        Send Operation
            ch <- 100
        Receive Operation
            data := <- ch

    Important:
        A RECEIVE operation is ALWAYS a blocking operation
        A SEND operation is blocked UNTIL a receive operation is initiated


GRPC
    Communication Patterns
        1. Request Response
        2. Server Streaming (1 request & a stream of responses)
        3. Client Streaming (a stream of requests & 1 response)
        4. Bidirectional Streaming (a stream of requests & a stream of responses)



    Installation
        1. Protocol Buffers Compiler (protoc tool)
            Windows:
                Download the file, extract and keep in a folder (PATH) accessble through the command line
                https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-win64.zip
            Mac:
                brew install protobuf

            Verification:
                protoc --version

        2. Go plugins
            go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2

    Steps:
        1. Create the contracts
            Service Contract
            Operation Contracts
            Message / Data Contracts
        2. Generate the proxy and stub using the the contracts
            From the app folder (go.mod folder)
                protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto
        3. Implement the service
        4. Host the service
        5. Use the proxy to communicate to the service

    